library(fdaPDEtime)
unloadNamespace("fdaPDEtime")
library(fdaPDEtime)
library(fdaPDE)
library(fdaPDEtime)
library(fdaPDE)
unloadNamespace("fdaPDE")
unloadNamespace("fdaPDEtime")
library(fdaPDEtime)
setwd("~/PACS-SpazioTempo/RScripts/")
load("../Data/datiSolParabolico2.RData")
load("../Data/datiSolParabolico2_evaluate.RData")
source("../R/FEMr.smoothing.R")
source("../R/FEMr.smoothing_CPP.R")
source("../R/FEMr.smoothing_R.R")
source("../R/plotFunction.R")
source("../R/FEMr.checkParameters.R")
setwd("../R")
set.seed(254)
norm_vec <- function(x) sqrt(sum(x^2))
class(mesh)<-"mesh.2D"
FEMbasis = create.FEM.basis(mesh)
View(create.FEM.basis)
FEMbasis = create.FEM.basis(mesh)
View(create.FEM.basis)
?Promise
setwd("~/PACS-SpazioTempo/RScripts/")
library(fdaPDE)
load("../Data/datiSolParabolico2.RData")
load("../Data/datiSolParabolico2_evaluate.RData")
source("../R/FEMr.smoothing.R")
source("../R/FEMr.smoothing_CPP.R")
source("../R/FEMr.smoothing_R.R")
source("../R/plotFunction.R")
source("../R/FEMr.checkParameters.R")
setwd("../R")
set.seed(254)
norm_vec <- function(x) sqrt(sum(x^2))
class(mesh)<-"mesh.2D"
FEMbasis = create.FEM.basis(mesh)
ICesatta = DatiEsatti[1:nrow(SpacePoints)]
NumTimeInstants_sol_esatta = NumTimeInstants
library(fdaPDEtime)
setwd("~/PACS-SpazioTempo/RScripts/")
load("../Data/datiSolParabolico2.RData")
load("../Data/datiSolParabolico2_evaluate.RData")
source("../R/FEMr.smoothing.R")
source("../R/FEMr.smoothing_CPP.R")
source("../R/FEMr.smoothing_R.R")
source("../R/plotFunction.R")
source("../R/FEMr.checkParameters.R")
setwd("../R")
set.seed(254)
norm_vec <- function(x) sqrt(sum(x^2))
class(mesh)<-"mesh.2D"
FEMbasis = create.FEM.basis(mesh)
ICesatta = DatiEsatti[1:nrow(SpacePoints)]
NumTimeInstants_sol_esatta = NumTimeInstants
indexInterni = NULL
for(ind in seq(1,NumTimeInstants_sol_esatta, by = 4))
{
indexInterni = c(indexInterni, (ind-1)*nrow(mesh$nodes) + which(mesh$nodesmarkers == 0))
}
DatiEsatti = sol_esatta[indexInterni]
SpacePoints = SpacePoints[mesh$nodesmarkers == 0,]
NumTimeInstants = 11
TimePoints<-seq(0,4,length.out=11)
BC = NULL
for(iter in 0:(NumTimeInstants-1))
{
BC$BC_indices = c(BC$BC_indices,rep(iter*length(mesh$nodesmarkers),length(which(mesh$nodesmarkers == 1)))+which(mesh$nodesmarkers == 1))
}
BC$BC_values = rep(0,length(BC$BC_indices))
BCpar = NULL
for(iter in 0:(NumTimeInstants-2))
{
BCpar$BC_indices = c(BCpar$BC_indices,rep(iter*length(mesh$nodesmarkers),length(which(mesh$nodesmarkers == 1)))+which(mesh$nodesmarkers == 1))
}
BCpar$BC_values = rep(0,length(BCpar$BC_indices))
BCIC = NULL
BCIC$BC_indices = which(mesh$nodesmarkers == 1)
BCIC$BC_values = rep(0,length(BCIC$BC_indices))
K_func<-function(points)
{
output = array(0, c(2, 2, nrow(points)))
for (i in 1:nrow(points))
output[,,i] = rbind(c(1,0),c(0,1))
output
}
beta_func<-function(points)
{
rep(c(0,0), nrow(points))
}
c_func<-function(points)
{
rep(c(0), nrow(points))
}
u_func<-function(points)
{
rep(c(0), nrow(points))
}
# Group all coefficients in one object
PDE_parameters = list(K = K_func, beta = beta_func, c = c_func, u = u_func)
Data = DatiEsatti
#### ESEMPIO: calcolo soluzione con lambda fissato e senza GCV ####
set.seed(57874 + iter)
Data = DatiEsatti + rnorm(length(DatiEsatti), mean = 0, sd = 0.05*(max(DatiEsatti)- min(DatiEsatti)))
# Stimo la IC per il parabolico, uso una griglia per lambda tanto il caso solo spazio ? veloce
lambdaS = 10^seq(-8,0,by = 0.5)
IC = smooth.PDE.sv.basis.time(locations = SpacePoints,
time_mesh = 0,
observations = Data[1:(dim(SpacePoints)[1])],
FEMbasis = FEMbasis,
lambdaS = lambdaS,
BC = BCIC,
PDE_parameters = PDE_parameters,
CPP_solver = 0,
FLAG_GCV = TRUE)
solution = smooth.PDE.sv.basis.time(locations = SpacePoints,
time_mesh = TimePoints,
observations = Data[(dim(SpacePoints)[1]+1):(dim(SpacePoints)[1]*(length(TimePoints)))],
FEMbasis = FEMbasis,
lambdaS = 1,
lambdaT = 1,
FLAG_PARABOLIC = TRUE,
IC = IC$coeff[IC$bestLambdaS_index,IC$bestLambdaT_index,],
BC = BCpar,
PDE_parameters = PDE_parameters,
CPP_solver = 0,
FLAG_GCV = FALSE)
solutionSep = smooth.PDE.sv.basis.time(locations = SpacePoints,
time_locations = TimePoints,
observations = Data,
FEMbasis = FEMbasis,
lambdaS = 1,
lambdaT = 1,
FLAG_PARABOLIC = FALSE,
BC = BC,
PDE_parameters = PDE_parameters,
CPP_solver = 0,
FLAG_GCV = FALSE)
#### ESEMPIO: calcolo matrice dei dof ####
# Soluzione del problema con penalizzazione parabolica
lambdaS_Par = 10^seq(-9,1.5,by = 0.5)
lambdaT_Par = c(10^seq(-3, 0, by = 0.5), 2^seq(1,4, by = 1), 10^seq(1.5,2.5, by = 0.5))
setwd("~/fdaPDE_colli/pacsColliColombo/tests/")
GCVFLAG=TRUE  # =FALSE do not compute GCV (default)
#GCVMETHODFLAG=1 #for exact GCV
GCVMETHODFLAG=2 #for stochastic GCV (default)
set.seed(5847947)
data("sphere3D")
cat('Plotting the mesh \n')
plot(sphere3D)
?plot.mesh.3D
plot.mesh.3D(sphere3D)
View(plot.mesh.3D)
